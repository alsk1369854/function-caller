{"version":3,"file":"index.js","names":["FunctionCaller","root","Map","key","func","keyExists","hasKey","Error","functionMap","set","targetFunc","get","args","call","delete","clear","has","keys","entries","size","_FunctionCaller"],"sources":["../../src/FunctionCaller/index.ts"],"sourcesContent":["'use strict'\r\nimport IFunctionCaller from \"./IFunctionCaller\";\r\n\r\nexport default class FunctionCaller implements IFunctionCaller {\r\n    readonly functionMap: Map<string, Function> = new Map();\r\n\r\n    constructor(root: any) {\r\n        if(root && !root._FunctionCaller){\r\n            root._FunctionCaller = this;\r\n        }\r\n    }\r\n\r\n    set = (key: string, func: Function): boolean => {\r\n        const keyExists: boolean = this.hasKey(key);\r\n\r\n        if (keyExists) {\r\n            throw new Error(`function-caller: Key \"${key}\" is exists`);\r\n        } else {\r\n            this.functionMap.set(key, func);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    call = (key: string, ...args: any[]): any => {\r\n        const targetFunc = this.functionMap.get(key);\r\n\r\n        if (targetFunc) {\r\n            return targetFunc(...args);\r\n        }\r\n    }\r\n\r\n    asyncCall = async (key: string, ...args: any[]): Promise<any> => {\r\n        return this.call(key, ...args);\r\n    }\r\n\r\n    remove = (key: string): void => {\r\n        this.functionMap.delete(key);\r\n    }\r\n\r\n    clear = (): void => {\r\n        this.functionMap.clear()\r\n    }\r\n\r\n    hasKey = (key: string) => {\r\n        return this.functionMap.has(key);\r\n    }\r\n\r\n    getKeys = (): IterableIterator<string> => {\r\n        return this.functionMap.keys();\r\n    }\r\n\r\n    getEntries = (): IterableIterator<[string, Function]> => {\r\n        return this.functionMap.entries()\r\n    }\r\n\r\n    getFunction = (key: string): Function | undefined => {\r\n        return this.functionMap.get(key)\r\n    }\r\n\r\n    getSize = (): number => {\r\n        return this.functionMap.size\r\n    }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAAA;EAAA;AAAA;AAAA;AAAA;AAAA,+CACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEqBA,cAAc,6BAG/B,wBAAYC,IAAS,EAAE;EAAA;EAAA;EAAA,qCAFuB,IAAIC,GAAG,EAAE;EAAA,6BAQjD,UAACC,GAAW,EAAEC,IAAc,EAAc;IAC5C,IAAMC,SAAkB,GAAG,KAAI,CAACC,MAAM,CAACH,GAAG,CAAC;IAE3C,IAAIE,SAAS,EAAE;MACX,MAAM,IAAIE,KAAK,kCAA0BJ,GAAG,kBAAc;IAC9D,CAAC,MAAM;MACH,KAAI,CAACK,WAAW,CAACC,GAAG,CAACN,GAAG,EAAEC,IAAI,CAAC;MAC/B,OAAO,IAAI;IACf;EACJ,CAAC;EAAA,8BAEM,UAACD,GAAW,EAA0B;IACzC,IAAMO,UAAU,GAAG,KAAI,CAACF,WAAW,CAACG,GAAG,CAACR,GAAG,CAAC;IAE5C,IAAIO,UAAU,EAAE;MAAA,kCAHIE,IAAI;QAAJA,IAAI;MAAA;MAIpB,OAAOF,UAAU,eAAIE,IAAI,CAAC;IAC9B;EACJ,CAAC;EAAA;IAAA,sEAEW,iBAAOT,GAAW;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA,2BAAKS,IAAI;cAAJA,IAAI;YAAA;YAAA,iCAC5B,KAAI,CAACC,IAAI,OAAT,KAAI,GAAMV,GAAG,SAAKS,IAAI,EAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACjC;IAAA;MAAA;IAAA;EAAA;EAAA,gCAEQ,UAACT,GAAW,EAAW;IAC5B,KAAI,CAACK,WAAW,CAACM,MAAM,CAACX,GAAG,CAAC;EAChC,CAAC;EAAA,+BAEO,YAAY;IAChB,KAAI,CAACK,WAAW,CAACO,KAAK,EAAE;EAC5B,CAAC;EAAA,gCAEQ,UAACZ,GAAW,EAAK;IACtB,OAAO,KAAI,CAACK,WAAW,CAACQ,GAAG,CAACb,GAAG,CAAC;EACpC,CAAC;EAAA,iCAES,YAAgC;IACtC,OAAO,KAAI,CAACK,WAAW,CAACS,IAAI,EAAE;EAClC,CAAC;EAAA,oCAEY,YAA4C;IACrD,OAAO,KAAI,CAACT,WAAW,CAACU,OAAO,EAAE;EACrC,CAAC;EAAA,qCAEa,UAACf,GAAW,EAA2B;IACjD,OAAO,KAAI,CAACK,WAAW,CAACG,GAAG,CAACR,GAAG,CAAC;EACpC,CAAC;EAAA,iCAES,YAAc;IACpB,OAAO,KAAI,CAACK,WAAW,CAACW,IAAI;EAChC,CAAC;EAtDG,IAAGlB,IAAI,IAAI,CAACA,IAAI,CAACmB,eAAe,EAAC;IAC7BnB,IAAI,CAACmB,eAAe,GAAG,IAAI;EAC/B;AACJ,CAAC;AAAA"}