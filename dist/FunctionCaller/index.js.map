{"version":3,"file":"index.js","names":["FunctionCaller","root","Map","key","func","keyExists","hasKey","console","warn","functionMap","set","targetFunc","get","args","call","delete","clear","has","keys","entries","size","functionCaller","window"],"sources":["../../src/FunctionCaller/index.ts"],"sourcesContent":["import IFunctionCaller from \"./IFunctionCaller\";\n\nexport class FunctionCaller implements IFunctionCaller {\n    readonly functionMap: Map<string, Function> = new Map();\n\n    constructor(root: any) {\n        if (root && !root.FunctionCaller) {\n            root.FunctionCaller = this;\n        }\n    }\n\n    set = (key: string, func: Function): boolean => {\n        const keyExists: boolean = this.hasKey(key);\n\n        if (keyExists) {\n            console.warn(`function-caller: Key \"${key}\" is exists`);\n            return false;\n        } else {\n            this.functionMap.set(key, func);\n            return true;\n        }\n    }\n\n    call = (key: string, ...args: any[]): any => {\n        const targetFunc = this.functionMap.get(key);\n\n        if (targetFunc) {\n            return targetFunc(...args);\n        }\n    }\n\n    asyncCall = async (key: string, ...args: any[]): Promise<any> => {\n        return this.call(key, ...args);\n    }\n\n    remove = (key: string): void => {\n        this.functionMap.delete(key);\n    }\n\n    clear = (): void => {\n        this.functionMap.clear()\n    }\n\n    hasKey = (key: string) => {\n        return this.functionMap.has(key);\n    }\n\n    getKeys = (): IterableIterator<string> => {\n        return this.functionMap.keys();\n    }\n\n    getEntries = (): IterableIterator<[string, Function]> => {\n        return this.functionMap.entries()\n    }\n\n    getFunction = (key: string): Function | undefined => {\n        return this.functionMap.get(key)\n    }\n\n    getSize = (): number => {\n        return this.functionMap.size\n    }\n}\nconst functionCaller: FunctionCaller = new FunctionCaller((typeof window === 'object' && window as any) || this);\nexport default functionCaller\n"],"mappings":";;;;;;;+CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACaA,cAAc,6BAGvB,wBAAYC,IAAS,EAAE;EAAA;EAAA;EAAA,qCAFuB,IAAIC,GAAG,EAAE;EAAA,6BAQjD,UAACC,GAAW,EAAEC,IAAc,EAAc;IAC5C,IAAMC,SAAkB,GAAG,KAAI,CAACC,MAAM,CAACH,GAAG,CAAC;IAE3C,IAAIE,SAAS,EAAE;MACXE,OAAO,CAACC,IAAI,kCAA0BL,GAAG,kBAAc;MACvD,OAAO,KAAK;IAChB,CAAC,MAAM;MACH,KAAI,CAACM,WAAW,CAACC,GAAG,CAACP,GAAG,EAAEC,IAAI,CAAC;MAC/B,OAAO,IAAI;IACf;EACJ,CAAC;EAAA,8BAEM,UAACD,GAAW,EAA0B;IACzC,IAAMQ,UAAU,GAAG,KAAI,CAACF,WAAW,CAACG,GAAG,CAACT,GAAG,CAAC;IAE5C,IAAIQ,UAAU,EAAE;MAAA,kCAHIE,IAAI;QAAJA,IAAI;MAAA;MAIpB,OAAOF,UAAU,eAAIE,IAAI,CAAC;IAC9B;EACJ,CAAC;EAAA;IAAA,sEAEW,iBAAOV,GAAW;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA,2BAAKU,IAAI;cAAJA,IAAI;YAAA;YAAA,iCAC5B,KAAI,CAACC,IAAI,OAAT,KAAI,GAAMX,GAAG,SAAKU,IAAI,EAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACjC;IAAA;MAAA;IAAA;EAAA;EAAA,gCAEQ,UAACV,GAAW,EAAW;IAC5B,KAAI,CAACM,WAAW,CAACM,MAAM,CAACZ,GAAG,CAAC;EAChC,CAAC;EAAA,+BAEO,YAAY;IAChB,KAAI,CAACM,WAAW,CAACO,KAAK,EAAE;EAC5B,CAAC;EAAA,gCAEQ,UAACb,GAAW,EAAK;IACtB,OAAO,KAAI,CAACM,WAAW,CAACQ,GAAG,CAACd,GAAG,CAAC;EACpC,CAAC;EAAA,iCAES,YAAgC;IACtC,OAAO,KAAI,CAACM,WAAW,CAACS,IAAI,EAAE;EAClC,CAAC;EAAA,oCAEY,YAA4C;IACrD,OAAO,KAAI,CAACT,WAAW,CAACU,OAAO,EAAE;EACrC,CAAC;EAAA,qCAEa,UAAChB,GAAW,EAA2B;IACjD,OAAO,KAAI,CAACM,WAAW,CAACG,GAAG,CAACT,GAAG,CAAC;EACpC,CAAC;EAAA,iCAES,YAAc;IACpB,OAAO,KAAI,CAACM,WAAW,CAACW,IAAI;EAChC,CAAC;EAvDG,IAAInB,IAAI,IAAI,CAACA,IAAI,CAACD,cAAc,EAAE;IAC9BC,IAAI,CAACD,cAAc,GAAG,IAAI;EAC9B;AACJ,CAAC;AAAA;AAsDL,IAAMqB,cAA8B,GAAG,IAAIrB,cAAc,CAAE,QAAOsB,MAAM,yCAANA,MAAM,OAAK,QAAQ,IAAIA,MAAa,UAAS,CAAC;AAAC,eAClGD,cAAc;AAAA"}